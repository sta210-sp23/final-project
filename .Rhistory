data = round_32,
family = "binomial")
stepAIC(round_32_min,
scope = list(lower = round_32_min,
upper = round_32_max),
data = round_32, direction = "both")
round_32_model <- stepAIC(round_32_min,
scope = list(lower = round_32_min,
upper = round_32_max),
data = round_32, direction = "both")
sweet_sixteen_max <- glm(sweet_sixteen ~ ADJOE + ADJDE +
`EFG%` + `EFGD%` + TOR + TORD +
ORB + DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + `2P%`*`2P%D`,,
data = sweet_sixteen,
family = "binomial")
sweet_sixteen_min <- glm(sweet_sixteen ~ 1,
data = sweet_sixteen,
family = "binomial")
sweet_sixteen_model <- stepAIC(sweet_sixteen_min,
scope = list(lower = sweet_sixteen_min,
upper = sweet_sixteen_max),
data = sweet_sixteen, direction = "both")
elite_eight_max <- glm(elite_eight ~ ADJOE + ADJDE +
`EFG%` + `EFGD%` + TOR + TORD +
ORB + DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + `2P%`*`2P%D`,,
data = elite_eight,
family = "binomial")
elite_eight_min <- glm(elite_eight ~ 1,
data = elite_eight,
family = "binomial")
elite_eight_model <- stepAIC(elite_eight_min,
scope = list(lower = elite_eight_min,
upper = elite_eight_max),
data = elite_eight, direction = "both")
final_four_max <- glm(final_four ~ ADJOE + ADJDE +
`EFG%` + `EFGD%` + TOR + TORD +
ORB + DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + `2P%`*`2P%D`,,
data = final_four,
family = "binomial")
final_four_min <- glm(final_four ~ 1,
data = final_four,
family = "binomial")
stepAIC(final_four_min,
scope = list(lower = final_four_min,
upper = final_four_max),
data = final_four, direction = "both")
champ_game_max <- glm(champ_game ~ ADJOE + ADJDE +
`EFG%` + `EFGD%` + TOR + TORD +
ORB + DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + `2P%`*`2P%D`,,
data = champ_game,
family = "binomial")
champ_game_min <- glm(champ_game ~ 1,
data = champ_game,
family = "binomial")
stepAIC(champ_game_min,
scope = list(lower = champ_game_min,
upper = champ_game_max),
data = champ_game, direction = "both")
champ_game_max <- glm(champ_game ~ ADJOE + ADJDE +
`EFG%` + `EFGD%` + TOR + TORD +
ORB + DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + `2P%`*`2P%D`,,
data = champ_game,
family = "binomial")
champ_game_min <- glm(champ_game ~ 1,
data = champ_game,
family = "binomial")
final_four_model <- stepAIC(champ_game_min,
scope = list(lower = champ_game_min,
upper = champ_game_max),
data = champ_game, direction = "both")
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
w <- tibble(predict(round_32_model, mbb_2023)) |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(round_32_model, mbb_2023)))
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
w <- tibble(predict(sweet_sixteen_model, mbb_2023)) |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(sweet_sixteen_model, mbb_2023)))
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
w <- tibble(predict(elite_eight_model, mbb_2023)) |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(elite_eight_model, mbb_2023)))
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
w <- tibble(predict(sweet_sixteen_model, mbb_2023)) |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(sweet_sixteen_model, mbb_2023)))
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
w <- tibble(predict(elite_eight_model, mbb_2023)) |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(elite_eight_model, mbb_2023)))
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
w <- tibble(predict(final_four_model, mbb_2023)) |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(final_four_model, mbb_2023)))
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
w <- tibble(predict(champ_game_model, mbb_2023)) |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(champ_game_model, mbb_2023)))
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(round_64_max, mbb_2023)))
round_64_max <- glm(round_64 ~ ADJOE + ADJDE + `EFG%` +
`EFGD%` + TOR + TORD + ORB +
DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D`*`3P%` + `ADJ T.`*ADJOE +
`ADJ T.`*ADJDE + `ADJ T.`*`EFG%` +
`ADJ T.`*`EFGD%` + `ADJ T.`*TOR +
`ADJ T.`*TORD + `ADJ T.`*ORB +
`ADJ T.`*DRB + `ADJ T.`*FTRD +
`ADJ T.`*`2P%` + `ADJ T.`*`2P%D` +
`ADJ T.`*`3P%`
data = round_64,
round_64_max <- glm(round_64 ~ ADJOE + ADJDE + `EFG%` +
`EFGD%` + TOR + TORD + ORB +
DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D`*`3P%` + `ADJ T.`*ADJOE +
`ADJ T.`*ADJDE + `ADJ T.`*`EFG%` +
`ADJ T.`*`EFGD%` + `ADJ T.`*TOR +
`ADJ T.`*TORD + `ADJ T.`*ORB +
`ADJ T.`*DRB + `ADJ T.`*FTRD +
`ADJ T.`*`2P%` + `ADJ T.`*`2P%D` +
`ADJ T.`*`3P%`,
data = round_64,
family = "binomial")
round_64_min <- glm(round_64 ~ 1,
data = round_64,
family = "binomial")
round_64_model <- stepAIC(round_64_min,
scope = list(lower = round_64_min, upper = round_64_max),
data = round_64, direction = "both")
<- glm(formula = round_64 ~ ADJOE + ADJDE + `2P%D` + DRB + TOR +
round_64_max
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(round_64_max, mbb_2023)))
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(round_64_max, mbb_2023)))
#separated each row by round for determining differences
cbb <- mutate(cbb, round_64 = if_else(march_madness == "R64", FALSE, TRUE))
round_64 <- cbb
cbb <- mutate(cbb, round_32 =
case_when(march_madness == "R32" ~ FALSE,
march_madness %in% c("S16", "E8", "F4", "2ND", "Champions") ~ TRUE,
TRUE ~ NA))
round_32 <- cbb[!is.na(cbb$round_32),]
cbb <- mutate(cbb, sweet_sixteen =
case_when(march_madness == "S16" ~ FALSE,
march_madness %in% c("E8", "F4", "2ND", "Champions") ~ TRUE,
TRUE ~ NA))
sweet_sixteen <- cbb[!is.na(cbb$sweet_sixteen),]
cbb <- mutate(cbb, elite_eight =
case_when(march_madness == "E8" ~ FALSE,
march_madness %in% c("F4", "2ND", "Champions") ~ TRUE,
TRUE ~ NA))
elite_eight <- cbb[!is.na(cbb$elite_eight),]
cbb <- mutate(cbb, final_four =
case_when(march_madness == "F4" ~ FALSE,
march_madness %in% c("2ND", "Champions") ~ TRUE,
TRUE ~ NA))
final_four <- cbb[!is.na(cbb$final_four),]
cbb <- mutate(cbb, champ_game =
case_when(march_madness == "2ND" ~ FALSE,
march_madness %in% c("Champions") ~ TRUE,
TRUE ~ NA))
champ_game <- cbb[!is.na(cbb$champ_game),]
round_64_max <- glm(round_64 ~ ADJOE + ADJDE + `EFG%` +
`EFGD%` + TOR + TORD + ORB +
DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D`*`3P%` + `ADJ T.`*ADJOE +
`ADJ T.`*ADJDE + `ADJ T.`*`EFG%` +
`ADJ T.`*`EFGD%` + `ADJ T.`*TOR +
`ADJ T.`*TORD + `ADJ T.`*ORB +
`ADJ T.`*DRB + `ADJ T.`*FTRD +
`ADJ T.`*`2P%` + `ADJ T.`*`2P%D` +
`ADJ T.`*`3P%`,
data = round_64,
family = "binomial")
round_64_min <- glm(round_64 ~ 1,
data = round_64,
family = "binomial")
round_64_model <- stepAIC(round_64_min,
scope = list(lower = round_64_min, upper = round_64_max),
data = round_64, direction = "both")
round_64_max <- glm(round_64 ~ ADJOE + ADJDE + `EFG%` +
`EFGD%` + TOR + TORD + ORB +
DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D`*`3P%` + `ADJ T.`*ADJOE +
`ADJ T.`*ADJDE + `ADJ T.`*`EFG%` +
`ADJ T.`*`EFGD%` + `ADJ T.`*TOR +
`ADJ T.`*TORD + `ADJ T.`*ORB +
`ADJ T.`*DRB + `ADJ T.`*FTRD +
`ADJ T.`*`2P%` + `ADJ T.`*`2P%D` +
`ADJ T.`*`3P%`,
data = round_64,
family = "binomial")
round_64_min <- glm(round_64 ~ 1,
data = round_64,
family = "binomial")
round_64_model <- stepAIC(round_64_min,
scope = list(lower = round_64_min, upper = round_64_max),
data = round_64, direction = "both")
round_64_max <- glm(round_64 ~ ADJOE + ADJDE + `EFG%` +
`EFGD%` + TOR + TORD + ORB +
DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D`*`3P%` + `ADJ T.`*ADJOE +
`ADJ T.`*ADJDE + `ADJ T.`*`EFG%` +
`ADJ T.`*`EFGD%` + `ADJ T.`*TOR +
`ADJ T.`*TORD + `ADJ T.`*ORB +
`ADJ T.`*DRB + `ADJ T.`*FTRD +
`ADJ T.`*`2P%` + `ADJ T.`*`2P%D` +
`ADJ T.`*`3P%`,
data = round_64,
family = "binomial")
round_64_max <- glm(round_64 ~ ADJOE + ADJDE + `EFG%` +
`EFGD%` + TOR + TORD + ORB +
DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D`*`3P%` + `ADJ T.`*ADJOE +
`ADJ T.`*ADJDE + `ADJ T.`*`EFG%` +
`ADJ T.`*`EFGD%` + `ADJ T.`*TOR +
`ADJ T.`*TORD + `ADJ T.`*ORB +
`ADJ T.`*DRB + `ADJ T.`*FTRD +
`ADJ T.`*`2P%` + `ADJ T.`*`2P%D` +
`ADJ T.`*`3P%`,
data = round_64,
family = "binomial")
round_64_min <- glm(round_64 ~ 1,
data = round_64,
family = "binomial")
round_64_model <- stepAIC(round_64_max,
scope = list(lower = round_64_min, upper = round_64_max),
data = round_64, direction = "both")
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(round_64_max, mbb_2023)))
round_32_max <- glm(round_32 ~ ADJOE + ADJDE + `EFG%` +
`EFGD%` + TOR + TORD + ORB +
DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D`*`3P%` + `ADJ T.`*ADJOE +
`ADJ T.`*ADJDE + `ADJ T.`*`EFG%` +
`ADJ T.`*`EFGD%` + `ADJ T.`*TOR +
`ADJ T.`*TORD + `ADJ T.`*ORB +
`ADJ T.`*DRB + `ADJ T.`*FTRD +
`ADJ T.`*`2P%` + `ADJ T.`*`2P%D` +
`ADJ T.`*`3P%`,
data = round_32,
family = "binomial")
round_32_min <- glm(round_32 ~ 1,
data = round_32,
family = "binomial")
round_32_model <- stepAIC(round_32_max,
scope = list(lower = round_32_min,
upper = round_32_max),
data = round_32, direction = "both")
sweet_sixteen_max <- glm(sweet_sixteen ~ ADJOE + ADJDE + `EFG%` +
`EFGD%` + TOR + TORD + ORB +
DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D`*`3P%` + `ADJ T.`*ADJOE +
`ADJ T.`*ADJDE + `ADJ T.`*`EFG%` +
`ADJ T.`*`EFGD%` + `ADJ T.`*TOR +
`ADJ T.`*TORD + `ADJ T.`*ORB +
`ADJ T.`*DRB + `ADJ T.`*FTRD +
`ADJ T.`*`2P%` + `ADJ T.`*`2P%D` +
`ADJ T.`*`3P%`,
data = sweet_sixteen,
family = "binomial")
sweet_sixteen_min <- glm(sweet_sixteen ~ 1,
data = sweet_sixteen,
family = "binomial")
sweet_sixteen_model <- stepAIC(sweet_sixteen_max,
scope = list(lower = sweet_sixteen_min,
upper = sweet_sixteen_max),
data = sweet_sixteen, direction = "both")
elite_eight_model <- stepAIC(elite_eight_max,
scope = list(lower = elite_eight_min,
upper = elite_eight_max),
data = elite_eight, direction = "both")
elite_eight_max <- glm(elite_eight ~ ADJOE + ADJDE + `EFG%` +
`EFGD%` + TOR + TORD + ORB +
DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D`*`3P%` + `ADJ T.`*ADJOE +
`ADJ T.`*ADJDE + `ADJ T.`*`EFG%` +
`ADJ T.`*`EFGD%` + `ADJ T.`*TOR +
`ADJ T.`*TORD + `ADJ T.`*ORB +
`ADJ T.`*DRB + `ADJ T.`*FTRD +
`ADJ T.`*`2P%` + `ADJ T.`*`2P%D` +
`ADJ T.`*`3P%`,
data = elite_eight,
family = "binomial")
elite_eight_min <- glm(elite_eight ~ 1,
data = elite_eight,
family = "binomial")
elite_eight_model <- stepAIC(elite_eight_max,
scope = list(lower = elite_eight_min,
upper = elite_eight_max),
data = elite_eight, direction = "both")
final_four_max <- glm(final_four ~ ADJOE + ADJDE + `EFG%` +
`EFGD%` + TOR + TORD + ORB +
DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D`*`3P%` + `ADJ T.`*ADJOE +
`ADJ T.`*ADJDE + `ADJ T.`*`EFG%` +
`ADJ T.`*`EFGD%` + `ADJ T.`*TOR +
`ADJ T.`*TORD + `ADJ T.`*ORB +
`ADJ T.`*DRB + `ADJ T.`*FTRD +
`ADJ T.`*`2P%` + `ADJ T.`*`2P%D` +
`ADJ T.`*`3P%`,
data = final_four,
family = "binomial")
final_four_min <- glm(final_four ~ 1,
data = final_four,
family = "binomial")
final_four_model <- stepAIC(final_four_max,
scope = list(lower = final_four_min,
upper = final_four_max),
data = final_four, direction = "both")
final_four_max <- glm(final_four ~ ADJOE + ADJDE + `EFG%` +
`EFGD%` + TOR + TORD + ORB +
DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D`*`3P%` + `ADJ T.`*ADJOE +
`ADJ T.`*ADJDE + `ADJ T.`*`EFG%` +
`ADJ T.`*`EFGD%` + `ADJ T.`*TOR +
`ADJ T.`*TORD + `ADJ T.`*ORB +
`ADJ T.`*DRB + `ADJ T.`*FTRD +
`ADJ T.`*`2P%` + `ADJ T.`*`2P%D` +
`ADJ T.`*`3P%`,
data = final_four,
family = "binomial")
final_four_min <- glm(final_four ~ 1,
data = final_four,
family = "binomial")
final_four_model <- stepAIC(final_four_max,
scope = list(lower = final_four_min,
upper = final_four_max),
data = final_four, direction = "both")
final_four_max <- glm(final_four ~ ADJOE + ADJDE + `EFG%` +
`EFGD%` + TOR + TORD + ORB +
DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D`*`3P%` + `ADJ T.`*ADJOE +
`ADJ T.`*ADJDE + `ADJ T.`*`EFG%` +
`ADJ T.`*`EFGD%` + `ADJ T.`*TOR +
`ADJ T.`*TORD + `ADJ T.`*ORB +
`ADJ T.`*DRB + `ADJ T.`*FTRD +
`ADJ T.`*`2P%` + `ADJ T.`*`2P%D` +
`ADJ T.`*`3P%`,
data = final_four,
family = "binomial")
final_four_min <- glm(final_four ~ 1,
data = final_four,
family = "binomial")
final_four_model <- stepAIC(final_four_max,
scope = list(lower = final_four_min,
upper = final_four_max),
data = final_four, direction = "both")
champ_game_max <- glm(champ_game ~ ADJOE + ADJDE + `EFG%` +
`EFGD%` + TOR + TORD + ORB +
DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D`*`3P%` + `ADJ T.`*ADJOE +
`ADJ T.`*ADJDE + `ADJ T.`*`EFG%` +
`ADJ T.`*`EFGD%` + `ADJ T.`*TOR +
`ADJ T.`*TORD + `ADJ T.`*ORB +
`ADJ T.`*DRB + `ADJ T.`*FTRD +
`ADJ T.`*`2P%` + `ADJ T.`*`2P%D` +
`ADJ T.`*`3P%`,
data = champ_game,
family = "binomial")
champ_game_min <- glm(champ_game ~ 1,
data = champ_game,
family = "binomial")
final_four_model <- stepAIC(champ_game_min,
scope = list(lower = champ_game_min,
upper = champ_game_max),
data = champ_game, direction = "both")
final_four_model <- stepAIC(champ_game_max,
scope = list(lower = champ_game_min,
upper = champ_game_max),
data = champ_game, direction = "both")
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(round_64_max, mbb_2023)))
left_join(w, mbb_2023) |>
arrange(desc(predict(round_32_max, mbb_2023)))
left_join(w, mbb_2023) |>
arrange(desc(predict(sweet_sixteen_max, mbb_2023)))
left_join(w, mbb_2023) |>
arrange(desc(predict(round_64_model, mbb_2023)))
left_join(w, mbb_2023) |>
arrange(desc(predict(round_32_model, mbb_2023)))
left_join(w, mbb_2023) |>
arrange(desc(predict(sweet_sixteen_model, mbb_2023)))
left_join(w, mbb_2023) |>
arrange(desc(predict(elite_eight_model, mbb_2023)))
round_64_max <- glm(round_64 ~ ADJOE + ADJDE + `EFG%` +
`EFGD%` + TOR + TORD + ORB +
DRB + FTR + FTRD + `2P%` +
`2P%D` + `3P%` + `ADJ T.` +
ADJOE*ADJDE + `EFG%`*`EFGD%` +
TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D`*`3P%` + `ADJ T.`*ADJOE +
`ADJ T.`*ADJDE + `ADJ T.`*`EFG%` +
`ADJ T.`*`EFGD%` + `ADJ T.`*TOR +
`ADJ T.`*TORD + `ADJ T.`*ORB +
`ADJ T.`*DRB + `ADJ T.`*FTRD +
`ADJ T.`*`2P%` + `ADJ T.`*`2P%D` +
`ADJ T.`*`3P%`,
data = round_64,
family = "binomial")
round_64_min <- glm(round_64 ~ 1,
data = round_64,
family = "binomial")
round_64_model <- stepAIC(round_64_max,
scope = list(lower = round_64_min, upper = round_64_max),
data = round_64, direction = "both")
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(elite_eight_model, mbb_2023)))
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(elite_eight_model, mbb_2023)))
mbb_2023 <- read_csv("data/2023marchmadness.csv")
mbb_2023 <- mbb_2023 |>
mutate(rank = seq(1:63))
left_join(w, mbb_2023) |>
arrange(desc(predict(sweet_sixteen_model, mbb_2023)))
