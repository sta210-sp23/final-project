mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(sweet_sixteen_model, `2023stats`)))
tibble(predict(elite_eight_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange((predict(elite_eight_model, `2023stats`))
tibble(predict(elite_eight_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange((predict(elite_eight_model, `2023stats`)))
2023analytics
library(tidyverse)
library(tidymodels)
library(Stat2Data)
library(caret)
library(leaps)
library(MASS)
cbb <- read_csv("data/20082022torvik.csv")
sportsreference <- read_csv("data/sportsreference.csv")
background <- read_csv("data/teams_background.csv")
cbb <- left_join(cbb, background)
#Remove non-postseason teams and R68 losers
cbb <- cbb[!is.na(cbb$march_madness),]
cbb <- filter(cbb, !grepl("R68", march_madness))
#Cleaning up variable names, variables, etc
cbb$march_madness <- str_trim(cbb$march_madness, side = c("both"))
cbb <- rename(cbb, march_madness = march_madness)
cbb <- cbb |>
mutate(march_madness = case_when(
march_madness == "Sweet Sixteen" ~ "S16",
march_madness == "Elite Eight" ~ "E8",
march_madness == "Final Four" ~ "F4",
march_madness == "Finals" ~ "2ND",
march_madness == "CHAMPS" ~ "Champions",
TRUE ~ march_madness
))
cbb <- left_join(cbb, sportsreference, by = c("TEAM" = "School", "YEAR" = "Year"))
#separated each row by round for determining differences
cbb <- mutate(cbb, round_64 = if_else(march_madness == "R64", FALSE, TRUE))
round_64 <- cbb
cbb <- mutate(cbb, round_32 =
case_when(march_madness == "R32" ~ FALSE,
march_madness %in% c("S16", "E8", "F4", "2ND", "Champions") ~ TRUE,
TRUE ~ NA))
round_32 <- cbb[!is.na(cbb$round_32),]
cbb <- mutate(cbb, sweet_sixteen =
case_when(march_madness == "S16" ~ FALSE,
march_madness %in% c("E8", "F4", "2ND", "Champions") ~ TRUE,
TRUE ~ NA))
sweet_sixteen <- cbb[!is.na(cbb$sweet_sixteen),]
cbb <- mutate(cbb, elite_eight =
case_when(march_madness == "E8" ~ FALSE,
march_madness %in% c("F4", "2ND", "Champions") ~ TRUE,
TRUE ~ NA))
elite_eight <- cbb[!is.na(cbb$elite_eight),]
cbb <- mutate(cbb, final_four =
case_when(march_madness == "F4" ~ FALSE,
march_madness %in% c("2ND", "Champions") ~ TRUE,
TRUE ~ NA))
final_four <- cbb[!is.na(cbb$final_four),]
cbb <- mutate(cbb, champ_game =
case_when(march_madness == "2ND" ~ FALSE,
march_madness %in% c("Champions") ~ TRUE,
TRUE ~ NA))
champ_game <- cbb[!is.na(cbb$champ_game),]
round_64 <- na.omit(round_64)
round_64_max <- glm(round_64 ~ G.x + WINS + LOSSES + ADJOE + ADJDE +
`EFG%` + `EFGD%` + TOR + TORD + ORB + DRB + FTR +
FTRD + `2P%` + `2P%D` + `3P%` + `3P%D` + `3PR` +
`3PRD` + `ADJ T.` + `Overall SRS` + `Overall SOS` +
`Conf. W-L%` + `Home W-L%` + `Away W-L%` +
`AVG PPG` + `AVG DPPG` + `AVG PD` + `AST/TOV` +
`PF/G` + WINS*G.x + LOSSES*G.x + ADJOE*ADJDE +
`EFG%`*`EFGD%` + TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D` + `3P%`*`3P%D` + `3PR`*`3PRD` +
`2P%`*`3P%` + `2P%D`*`3P%D` + `AVG PPG`*`AVG DPPG` +
WINS*`Overall SRS` + WINS*`Overall SOS` +
LOSSES*`Overall SRS` + LOSSES*`Overall SOS`,
data = round_64,
family = "binomial")
round_64_min <- glm(round_64 ~ 1,
data = round_64,
family = "binomial")
round_64_model <- stepAIC(round_64_max,
scope = list(lower = round_64_min, upper = round_64_max),
data = round_64, direction = "both")
`2023sr` <- read_csv("data/2023sportsreference.csv")
`2023analytics` <- read_csv("data/2023torvik.csv")
`2023stats` <- left_join(`2023analytics`, `2023sr`, by = c("TEAM" = "School"))
`2023teams` <- read_csv("data/2023teams.csv")
`2023stats` <- `2023stats` |>
filter(`2023stats`$TEAM %in% `2023teams`$TEAM)
tibble(predict(round_64_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(round_64_model, `2023stats`)))
tibble(predict(round_32_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(round_32_model, `2023stats`)))
tibble(predict(sweet_sixteen_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(sweet_sixteen_model, `2023stats`)))
tibble(predict(elite_eight_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(elite_eight_model, `2023stats`)))
tibble(predict(final_four_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(final_four_model, `2023stats`)))
`2023sr` <- read_csv("data/2023sportsreference.csv")
`2023analytics` <- read_csv("data/2023torvik.csv")
`2023stats` <- left_join(`2023analytics`, `2023sr`, by = c("TEAM" = "School"))
`2023teams` <- read_csv("data/2023teams.csv")
`2023stats` <- `2023stats` |>
filter(`2023stats`$TEAM %in% `2023teams`$TEAM)
tibble(predict(round_64_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(round_64_model, `2023stats`)))
tibble(predict(round_32_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(round_32_model, `2023stats`)))
tibble(predict(sweet_sixteen_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(sweet_sixteen_model, `2023stats`)))
tibble(predict(elite_eight_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(elite_eight_model, `2023stats`)))
tibble(predict(final_four_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(final_four_model, `2023stats`)))
2023stats
cbb
numrows(cbb)
nrow(cbb)
ncol(cbb)
unique(cbb$YEAR)
library(tidyverse)
library(tidymodels)
library(Stat2Data)
library(caret)
library(leaps)
library(MASS)
cbb <- read_csv("data/20082022torvik.csv")
sportsreference <- read_csv("data/sportsreference.csv")
background <- read_csv("data/teams_background.csv")
cbb <- left_join(cbb, background)
#Remove non-postseason teams and R68 losers
cbb <- cbb[!is.na(cbb$march_madness),]
cbb <- filter(cbb, !grepl("R68", march_madness))
#Cleaning up variable names, variables, etc
cbb$march_madness <- str_trim(cbb$march_madness, side = c("both"))
cbb <- rename(cbb, march_madness = march_madness)
cbb <- cbb |>
mutate(march_madness = case_when(
march_madness == "Sweet Sixteen" ~ "S16",
march_madness == "Elite Eight" ~ "E8",
march_madness == "Final Four" ~ "F4",
march_madness == "Finals" ~ "2ND",
march_madness == "CHAMPS" ~ "Champions",
TRUE ~ march_madness
))
cbb <- left_join(cbb, sportsreference, by = c("TEAM" = "School", "YEAR" = "Year"))
tidy(round_64_model)
tidy(round_32_model)
tidy(sweet_sixteen_model)
library(dplyr)
model_equation <- function(model, ...) {
format_args <- list(...)
model_coeff <- model$coefficients
format_args$x <- abs(model$coefficients)
model_coeff_sign <- sign(model_coeff)
model_coeff_prefix <- case_when(model_coeff_sign == -1 ~ " - ",
model_coeff_sign == 1 ~ " + ",
model_coeff_sign == 0 ~ " + ")
model_eqn <- paste(strsplit(as.character(model$call$formula), "~")[[2]], # 'y'
"=",
paste(if_else(model_coeff[1]<0, "- ", ""),
do.call(format, format_args)[1],
paste(model_coeff_prefix[-1],
do.call(format, format_args)[-1],
" * ",
names(model_coeff[-1]),
sep = "", collapse = ""),
sep = ""))
return(model_eqn)
}
model_equation <- function(round_32_model)
function(round_32_model)
function(round_32_model)aasa
sdf
function(round_32_model)
model_equation(round_32_model)
model_equation(round_32_model)
model_equation(round_32_model)
model_equation(round_32_model)
model_equation(round_32_model)
round_32_model
cc <- round_64_model$coefficients
cc
(eqn <- paste("Y =", paste(round(cc[1],2), paste(round(cc[-1],2), names(cc[-1]), sep=" * ", collapse=" + "), sep=" + "), "+ e"))
(eqn <- paste("Y =", paste(round(cc[1],4), paste(round(cc[-1],4), names(cc[-1]), sep=" * ", collapse=" + "), sep=" + "), "+ e"))
round_32_model
cc <- round_32_model$coefficients
(eqn <- paste("Y =", paste(round(cc[1],4), paste(round(cc[-1],4), names(cc[-1]), sep=" * ", collapse=" + "), sep=" + "), "+ e"))
cc <- sweet_sixteen_model$coefficients
(eqn <- paste("Y =", paste(round(cc[1],4), paste(round(cc[-1],4), names(cc[-1]), sep=" * ", collapse=" + "), sep=" + "), "+ e"))
mmb_ord_reg<- polr(factor(march_madness) ~
G.x + WINS + LOSSES + ADJOE + ADJDE +
`EFG%` + `EFGD%` + TOR + TORD + ORB + DRB + FTR +
FTRD + `2P%` + `2P%D` + `3P%` + `3P%D` + `3PR` +
`3PRD` + `ADJ T.` + `Overall SRS` + `Overall SOS` +
`Conf. W-L%` + `Home W-L%` + `Away W-L%` +
`AVG PPG` + `AVG DPPG` + `AVG PD` + `AST/TOV` +
`PF/G` + WINS*G.x + LOSSES*G.x + ADJOE*ADJDE +
`EFG%`*`EFGD%` + TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D` + `3P%`*`3P%D` + `3PR`*`3PRD` +
`2P%`*`3P%` + `2P%D`*`3P%D` + `AVG PPG`*`AVG DPPG` +
WINS*`Overall SRS` + WINS*`Overall SOS` +
LOSSES*`Overall SRS` + LOSSES*`Overall SOS`,
data = cbb)
mmb_ord_reg<- polr(factor(march_madness) ~
G.x + WINS + LOSSES + ADJOE + ADJDE +
`EFG%` + `EFGD%` + TOR + TORD + ORB + DRB + FTR +
FTRD + `2P%` + `2P%D` + `3P%` + `3P%D` + `3PR` +
`3PRD` + `ADJ T.` + `Overall SRS` + `Overall SOS` +
`Conf. W-L%` + `Home W-L%` + `Away W-L%` +
`AVG PPG` + `AVG DPPG` + `AVG PD` + `AST/TOV` +
`PF/G` + WINS*G.x + LOSSES*G.x + ADJOE*ADJDE +
`EFG%`*`EFGD%` + TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D` + `3P%`*`3P%D` + `3PR`*`3PRD` +
`2P%`*`3P%` + `2P%D`*`3P%D` + `AVG PPG`*`AVG DPPG` +
WINS*`Overall SRS` + WINS*`Overall SOS` +
LOSSES*`Overall SRS` + LOSSES*`Overall SOS`,
data = cbb)
factor(march_madness)
factor(cbb$march_madness)
fct_relevel(cbb$march_madness, R64, R32, S16, E8, F4, 2ND, Champions)
fct_relevel(cbb$march_madness, c("R64", "R32", "S16", "E8", "F4", "2ND", "Champions"))
cbb$march_madness <- fct_relevel(cbb$march_madness,
c("R64", "R32", "S16", "E8",
"F4", "2ND", "Champions"))
mmb_ord_reg<- polr(factor(march_madness) ~
G.x + WINS + LOSSES + ADJOE + ADJDE +
`EFG%` + `EFGD%` + TOR + TORD + ORB + DRB + FTR +
FTRD + `2P%` + `2P%D` + `3P%` + `3P%D` + `3PR` +
`3PRD` + `ADJ T.` + `Overall SRS` + `Overall SOS` +
`Conf. W-L%` + `Home W-L%` + `Away W-L%` +
`AVG PPG` + `AVG DPPG` + `AVG PD` + `AST/TOV` +
`PF/G` + WINS*G.x + LOSSES*G.x + ADJOE*ADJDE +
`EFG%`*`EFGD%` + TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D` + `3P%`*`3P%D` + `3PR`*`3PRD` +
`2P%`*`3P%` + `2P%D`*`3P%D` + `AVG PPG`*`AVG DPPG` +
WINS*`Overall SRS` + WINS*`Overall SOS` +
LOSSES*`Overall SRS` + LOSSES*`Overall SOS`,
data = cbb)
cbb$march_madness <- fct_relevel(cbb$march_madness,
c("R64", "R32", "S16", "E8",
"F4", "2ND", "Champions"))
mmb_ord_reg <- polr(march_madness ~
G.x + WINS + LOSSES + ADJOE + ADJDE +
`EFG%` + `EFGD%` + TOR + TORD + ORB + DRB + FTR +
FTRD + `2P%` + `2P%D` + `3P%` + `3P%D` + `3PR` +
`3PRD` + `ADJ T.` + `Overall SRS` + `Overall SOS` +
`Conf. W-L%` + `Home W-L%` + `Away W-L%` +
`AVG PPG` + `AVG DPPG` + `AVG PD` + `AST/TOV` +
`PF/G` + WINS*G.x + LOSSES*G.x + ADJOE*ADJDE +
`EFG%`*`EFGD%` + TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D` + `3P%`*`3P%D` + `3PR`*`3PRD` +
`2P%`*`3P%` + `2P%D`*`3P%D` + `AVG PPG`*`AVG DPPG` +
WINS*`Overall SRS` + WINS*`Overall SOS` +
LOSSES*`Overall SRS` + LOSSES*`Overall SOS`,
data = cbb)
mmb_ord_reg
round(predict(mmb_ord_reg, cbb, type = "probs"), 3)
round(predict(mmb_ord_reg, cbb[cbb$TEAM == "Duke",], type = "probs"), 3)
cbb$march_madness <- fct_relevel(cbb$march_madness,
c("R64", "R32", "S16", "E8",
"F4", "2ND", "Champions"))
mmb_ord_reg <- polr(march_madness ~
G.x + WINS + LOSSES + ADJOE + ADJDE +
`EFG%` + `EFGD%` + TOR + TORD + ORB + DRB + FTR +
FTRD + `2P%` + `2P%D` + `3P%` + `3P%D` + `3PR` +
`3PRD` + `ADJ T.` + `Overall SRS` + `Overall SOS` +
`Conf. W-L%` + `Home W-L%` + `Away W-L%` +
`AVG PPG` + `AVG DPPG` + `AVG PD` + `AST/TOV` +
`PF/G` + WINS*G.x + LOSSES*G.x + ADJOE*ADJDE +
`EFG%`*`EFGD%` + TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D` + `3P%`*`3P%D` + `3PR`*`3PRD` +
`2P%`*`3P%` + `2P%D`*`3P%D` + `AVG PPG`*`AVG DPPG` +
WINS*`Overall SRS` + WINS*`Overall SOS` +
LOSSES*`Overall SRS` + LOSSES*`Overall SOS`,
data = cbb)
round(predict(mmb_ord_reg, cbb[cbb$TEAM == "Duke",], type = "probs"), 3)
cbb$march_madness <- fct_relevel(cbb$march_madness,
c("R64", "R32", "S16", "E8",
"F4", "2ND", "Champions"))
mmb_ord_max <- polr(march_madness ~
G.x + WINS + LOSSES + ADJOE + ADJDE +
`EFG%` + `EFGD%` + TOR + TORD + ORB + DRB + FTR +
FTRD + `2P%` + `2P%D` + `3P%` + `3P%D` + `3PR` +
`3PRD` + `ADJ T.` + `Overall SRS` + `Overall SOS` +
`Conf. W-L%` + `Home W-L%` + `Away W-L%` +
`AVG PPG` + `AVG DPPG` + `AVG PD` + `AST/TOV` +
`PF/G` + WINS*G.x + LOSSES*G.x + ADJOE*ADJDE +
`EFG%`*`EFGD%` + TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D` + `3P%`*`3P%D` + `3PR`*`3PRD` +
`2P%`*`3P%` + `2P%D`*`3P%D` + `AVG PPG`*`AVG DPPG` +
WINS*`Overall SRS` + WINS*`Overall SOS` +
LOSSES*`Overall SRS` + LOSSES*`Overall SOS`,
data = cbb)
mmb_ord_max <- polr(march_madness ~
G.x + WINS + LOSSES + ADJOE + ADJDE +
`EFG%` + `EFGD%` + TOR + TORD + ORB + DRB + FTR +
FTRD + `2P%` + `2P%D` + `3P%` + `3P%D` + `3PR` +
`3PRD` + `ADJ T.` + `Overall SRS` + `Overall SOS` +
`Conf. W-L%` + `Home W-L%` + `Away W-L%` +
`AVG PPG` + `AVG DPPG` + `AVG PD` + `AST/TOV` +
`PF/G` + WINS*G.x + LOSSES*G.x + ADJOE*ADJDE +
`EFG%`*`EFGD%` + TOR*TORD + ORB*DRB + FTR*FTRD +
`2P%`*`2P%D` + `3P%`*`3P%D` + `3PR`*`3PRD` +
`2P%`*`3P%` + `2P%D`*`3P%D` + `AVG PPG`*`AVG DPPG` +
WINS*`Overall SRS` + WINS*`Overall SOS` +
LOSSES*`Overall SRS` + LOSSES*`Overall SOS`,
data = cbb)
mmb_ord_min <- polr(march_madness ~ 1, data = cbb)
mmb_ord_model <- stepAIC(mmb_ord_max,
scope = list(lower = mmb_ord_min,
upper = mmb_ord_max),
data = cbb, direction = "both")
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(mmb_ord_model, `2023stats`)))
?predict
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(mmb_ord_model, `2023stats`, type = "prob")))
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(mmb_ord_model, `2023stats`, type = "probs")))
variable
colnames(2023stats)
colnames(2023stats)
colnames(2023stats))
2023stats
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(mmb_ord_model, `2023stats`[`2023stats`$TEAM == "Duke",], type = "probs")))
View(2023stats)
colnames(`2023stats`)
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(mmb_ord_model, `2023stats`, type = "probs")))
`2023sr` <- read_csv("data/2023sportsreference.csv")
`2023analytics` <- read_csv("data/2023torvik.csv")
`2023stats` <- left_join(`2023analytics`, `2023sr`, by = c("TEAM" = "School"))
`2023teams` <- read_csv("data/2023teams.csv")
`2023stats` <- `2023stats` |>
filter(`2023stats`$TEAM %in% `2023teams`$TEAM)
tibble(predict(round_64_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(round_64_model, `2023stats`)))
tibble(predict(round_32_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(round_32_model, `2023stats`)))
tibble(predict(sweet_sixteen_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(sweet_sixteen_model, `2023stats`)))
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(mmb_ord_model, `2023stats`, type = "probs")))
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(mmb_ord_model, `2023stats`)))
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(mmb_ord_model, `2023stats`, type = "response")))
`2023sr` <- read_csv("data/2023sportsreference.csv")
`2023analytics` <- read_csv("data/2023torvik.csv")
`2023stats` <- left_join(`2023analytics`, `2023sr`, by = c("TEAM" = "School"))
`2023teams` <- read_csv("data/2023teams.csv")
`2023stats` <- `2023stats` |>
filter(`2023stats`$TEAM %in% `2023teams`$TEAM)
tibble(predict(round_64_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(round_64_model, `2023stats`)))
tibble(predict(round_32_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(round_32_model, `2023stats`)))
tibble(predict(sweet_sixteen_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(sweet_sixteen_model, `2023stats`)))
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(mmb_ord_model, `2023stats`, type = "response")))
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(mmb_ord_model, `2023stats`, type = "probs")))
`2023sr` <- read_csv("data/2023sportsreference.csv")
`2023analytics` <- read_csv("data/2023torvik.csv")
`2023stats` <- left_join(`2023analytics`, `2023sr`, by = c("TEAM" = "School"))
`2023teams` <- read_csv("data/2023teams.csv")
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(mmb_ord_model, `2023stats`, type = "response")))
`2023sr` <- read_csv("data/2023sportsreference.csv")
`2023analytics` <- read_csv("data/2023torvik.csv")
`2023stats` <- left_join(`2023analytics`, `2023sr`, by = c("TEAM" = "School"))
`2023teams` <- read_csv("data/2023teams.csv")
`2023stats` <- `2023stats` |>
filter(`2023stats`$TEAM %in% `2023teams`$TEAM)
tibble(predict(round_64_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(round_64_model, `2023stats`)))
tibble(predict(round_32_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(round_32_model, `2023stats`)))
tibble(predict(sweet_sixteen_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(sweet_sixteen_model, `2023stats`)))
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(mmb_ord_model, `2023stats`, type = "response")))
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(predict(mmb_ord_model, `2023stats`, type = "response"))
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(predict(mmb_ord_model, `2023stats`, type = "probs"))
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(predict(mmb_ord_model, `2023stats`, type = "probs"))
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(predict(mmb_ord_max, `2023stats`, type = "probs"))
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(predict(mmb_ord_max, `2023stats`))
`2023sr` <- read_csv("data/2023sportsreference.csv")
`2023analytics` <- read_csv("data/2023torvik.csv")
`2023stats` <- left_join(`2023analytics`, `2023sr`, by = c("TEAM" = "School"))
`2023teams` <- read_csv("data/2023teams.csv")
`2023stats` <- `2023stats` |>
filter(`2023stats`$TEAM %in% `2023teams`$TEAM)
tibble(predict(round_64_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(round_64_model, `2023stats`)))
tibble(predict(round_32_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(round_32_model, `2023stats`)))
tibble(predict(sweet_sixteen_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(sweet_sixteen_model, `2023stats`)))
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(predict(mmb_ord_max, `2023stats`))
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
predict(mmb_ord_max, `2023stats`)
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(predict(mmb_ord_model, `2023stats`, type = "response")))
desc
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(mmb_ord_model, `2023stats`, type = "response")))
probs
tibble(predict(mmb_ord_model, `2023stats`)) |>
mutate(rank = seq(1:64)) |>
left_join(mutate(`2023stats`, rank = seq(1:64))) |>
arrange(desc(predict(mmb_ord_model, `2023stats`, type = "probs")))
