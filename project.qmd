---
title: "Final Project - Predicting March Madness"
author: "Anmol Sapru and Rohit Gunda"
format: pdf
---

```{r load-libraries-data, message = FALSE, warning = FALSE}

library(tidyverse)
library(tidymodels)
library(Stat2Data)
library(caret)
library(leaps)
library(MASS)

cbb <- read_csv("data/20082022torvik.csv") 
sportsreference <- read_csv("data/sportsreference.csv")
background <- read_csv("data/teams_background.csv")

cbb <- left_join(cbb, background)

#Remove non-postseason teams and R68 losers
cbb <- cbb[!is.na(cbb$march_madness),]
cbb <- filter(cbb, !grepl("R68", march_madness))

#Cleaning up variable names, variables, etc
cbb$march_madness <- str_trim(cbb$march_madness, side = c("both"))
cbb <- rename(cbb, march_madness = march_madness) 

cbb <- cbb |>
  mutate(march_madness = case_when(
    march_madness == "Sweet Sixteen" ~ "S16",
    march_madness == "Elite Eight" ~ "E8",
    march_madness == "Final Four" ~ "F4",
    march_madness == "Finals" ~ "2ND",
    march_madness == "CHAMPS" ~ "Champions",
    TRUE ~ march_madness
  ))

cbb <- left_join(cbb, sportsreference, by = c("TEAM" = "School", "YEAR" = "Year"))
```

```{r round-separation}

#separated each row by round for determining differences
cbb <- mutate(cbb, round_64 = if_else(march_madness == "R64", FALSE, TRUE))
round_64 <- cbb

cbb <- mutate(cbb, round_32 = 
         case_when(march_madness == "R32" ~ FALSE,
         march_madness %in% c("S16", "E8", "F4", "2ND", "Champions") ~ TRUE,
         TRUE ~ NA))
round_32 <- cbb[!is.na(cbb$round_32),]

cbb <- mutate(cbb, sweet_sixteen = 
         case_when(march_madness == "S16" ~ FALSE,
         march_madness %in% c("E8", "F4", "2ND", "Champions") ~ TRUE,
         TRUE ~ NA))
sweet_sixteen <- cbb[!is.na(cbb$sweet_sixteen),]

cbb <- mutate(cbb, elite_eight = 
         case_when(march_madness == "E8" ~ FALSE,
         march_madness %in% c("F4", "2ND", "Champions") ~ TRUE,
         TRUE ~ NA))
elite_eight <- cbb[!is.na(cbb$elite_eight),]

cbb <- mutate(cbb, final_four = 
         case_when(march_madness == "F4" ~ FALSE,
         march_madness %in% c("2ND", "Champions") ~ TRUE,
         TRUE ~ NA))
final_four <- cbb[!is.na(cbb$final_four),]

cbb <- mutate(cbb, champ_game = 
         case_when(march_madness == "2ND" ~ FALSE,
         march_madness %in% c("Champions") ~ TRUE,
         TRUE ~ NA))
champ_game <- cbb[!is.na(cbb$champ_game),]
```

```{r round-64-model}

round_64 <- na.omit(round_64)

round_64_max <- glm(round_64 ~ G.x + WINS + LOSSES + ADJOE + ADJDE + 
                      `EFG%` + `EFGD%` + TOR + TORD + ORB + DRB + FTR +
                      FTRD + `2P%` + `2P%D` + `3P%` + `3P%D` + `3PR` +
                      `3PRD` + `ADJ T.` + `Overall SRS` + `Overall SOS` +   
                      `Conf. W-L%` + `Home W-L%` + `Away W-L%` + 
                      `AVG PPG` + `AVG DPPG` + `AVG PD` + `AST/TOV` + 
                      `PF/G` + WINS*G.x + LOSSES*G.x + ADJOE*ADJDE +
                      `EFG%`*`EFGD%` + TOR*TORD + ORB*DRB + FTR*FTRD +
                      `2P%`*`2P%D` + `3P%`*`3P%D` + `3PR`*`3PRD` +
                      `2P%`*`3P%` + `2P%D`*`3P%D` + `AVG PPG`*`AVG DPPG` +
                      WINS*`Overall SRS` + WINS*`Overall SOS` +
                      LOSSES*`Overall SRS` + LOSSES*`Overall SOS`,     
                      data = round_64,
                      family = "binomial")

round_64_min <- glm(round_64 ~ 1,
                    data = round_64,
                    family = "binomial")

round_64_model <- stepAIC(round_64_max,
        scope = list(lower = round_64_min, upper = round_64_max),
        data = round_64, direction = "both")
```

```{r round-32-model}

round_32_max <- glm(round_32 ~ ADJOE + ADJDE + `EFG%` + `EFGD%` +
                      TOR + TORD + ORB + DRB + FTR + FTRD + `2P%` + 
                      `2P%D` + `3P%` + `3P%D` + `ADJ T.` + 
                      `Overall SRS` + `Overall SOS` + `Conf. W-L%` + 
                      `Home W-L%` + `Away W-L%` + `AVG PPG` + 
                      `AVG DPPG` + `AVG PD` + `AST/TOV` + `PF/G` + 
                      ADJOE*ADJDE + `EFG%`*`EFGD%` + TOR*TORD + 
                      ORB*DRB + FTR*FTRD + `2P%`*`2P%D` + 
                      `2P%`*`3P%` + `3P%`*`3P%D` + `AVG PPG`*`AVG DPPG`,
                      data = round_32,
                      family = "binomial")

round_32_min <- glm(round_32 ~ 1,
                    data = round_32,
                    family = "binomial")

round_32_model <- stepAIC(round_32_max,
        scope = list(lower = round_32_min, 
                     upper = round_32_max),
        data = round_32, direction = "both")
```

```{r sweet-sixteen-model}

sweet_sixteen_max <- glm(sweet_sixteen ~ ADJOE + ADJDE + `EFG%` + `EFGD%` +
                      TOR + TORD + ORB + DRB + FTR + FTRD + `2P%` + 
                      `2P%D` + `3P%` + `3P%D` + `ADJ T.` + 
                      `Overall SRS` + `Overall SOS` + `Conf. W-L%` + 
                      `Home W-L%` + `Away W-L%` + `AVG PPG` + 
                      `AVG DPPG` + `AVG PD` + `AST/TOV` + `PF/G` + 
                      ADJOE*ADJDE + `EFG%`*`EFGD%` + TOR*TORD + 
                      ORB*DRB + FTR*FTRD + `2P%`*`2P%D` + 
                      `2P%`*`3P%` + `3P%`*`3P%D` + `AVG PPG`*`AVG DPPG`,
                        data = sweet_sixteen,
                        family = "binomial")

sweet_sixteen_min <- glm(sweet_sixteen ~ 1,
                    data = sweet_sixteen,
                    family = "binomial")

sweet_sixteen_model <- stepAIC(sweet_sixteen_max,
        scope = list(lower = sweet_sixteen_min,
                     upper = sweet_sixteen_max),
        data = sweet_sixteen, direction = "both")
```

```{r}

`2023sr` <- read_csv("data/2023sportsreference.csv")
`2023analytics` <- read_csv("data/2023torvik.csv")

`2023stats` <- left_join(`2023analytics`, `2023sr`, by = c("TEAM" = "School"))

`2023teams` <- read_csv("data/2023teams.csv")

`2023stats` <- `2023stats` |>
  filter(`2023stats`$TEAM %in% `2023teams`$TEAM)

tibble(predict(round_64_model, `2023stats`)) |>
  mutate(rank = seq(1:64)) |>
  left_join(mutate(`2023stats`, rank = seq(1:64))) |>
  arrange(desc(predict(round_64_model, `2023stats`)))

tibble(predict(round_32_model, `2023stats`)) |>
  mutate(rank = seq(1:64)) |>
  left_join(mutate(`2023stats`, rank = seq(1:64))) |>
  arrange(desc(predict(round_32_model, `2023stats`)))

tibble(predict(sweet_sixteen_model, `2023stats`)) |>
  mutate(rank = seq(1:64)) |>
  left_join(mutate(`2023stats`, rank = seq(1:64))) |>
  arrange(desc(predict(sweet_sixteen_model, `2023stats`)))
```
